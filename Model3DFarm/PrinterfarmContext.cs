// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Model3DFarm
{
    public partial class PrinterfarmContext : DbContext
    {
        string _dbConnection;
        public PrinterfarmContext()
        {
        }

        public PrinterfarmContext(string dbConnection)
        {
            this._dbConnection = dbConnection;
        }

        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<PrintJob> PrintJobs { get; set; }
        public virtual DbSet<Printer> Printers { get; set; }
        public virtual DbSet<PrintersMaterial> PrintersMaterials { get; set; }
        public virtual DbSet<PrintersService> PrintersServices { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<ServiceLogEvent> ServiceLogEvents { get; set; }
        public PrinterfarmContext(DbContextOptions<PrinterfarmContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            {
                if (!optionsBuilder.IsConfigured)
                {
                    optionsBuilder.UseLazyLoadingProxies();

                    if (!String.IsNullOrWhiteSpace(_dbConnection)) optionsBuilder.UseSqlServer(_dbConnection);
                }
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Material>(entity =>
            {
                entity.Property(e => e.MaterialName).IsFixedLength(true);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.CustomerName).IsFixedLength(true);

                entity.Property(e => e.OrderName).IsFixedLength(true);
            });

            modelBuilder.Entity<PrintJob>(entity =>
            {
                entity.Property(e => e.GcodeAdresse).IsFixedLength(true);

                entity.Property(e => e.JobName).IsFixedLength(true);

                entity.Property(e => e.Material).IsFixedLength(true);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.PrintJobs)
                    .HasForeignKey(d => d.OrderID)
                    .HasConstraintName("FK_PrintJobs_Orders");
            });

            modelBuilder.Entity<Printer>(entity =>
            {
                entity.Property(e => e.PrinterType).IsFixedLength(true);
            });

            modelBuilder.Entity<PrintersMaterial>(entity =>
            {
                entity.HasOne(d => d.PMMaterialsFKNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.PMMaterialsFK)
                    .HasConstraintName("FK_PrintersMaterials_Materials");

                entity.HasOne(d => d.PMPrintersFKNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.PMPrintersFK)
                    .HasConstraintName("FK_PrintersMaterials_Printers");
            });

            modelBuilder.Entity<PrintersService>(entity =>
            {
                entity.HasOne(d => d.PSPrintersFKNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.PSPrintersFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintersServices_Printers1");

                entity.HasOne(d => d.PSServicesFKNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.PSServicesFK)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrintersServices_ServiceLogEvents");
            });

            modelBuilder.Entity<Schedule>(entity =>
            {
                entity.HasOne(d => d.PrintJob)
                    .WithOne(p => p.PrintSchedule)
                    //.HasForeignKey(d=>d.PrintID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Schedule_PrintJobs");

                entity.HasOne(d => d.Printer)
                    .WithMany(p => p.Schedules)
                    .HasForeignKey(d => d.PrinterID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Schedule_Printers");
            });

            modelBuilder.Entity<ServiceLogEvent>(entity =>
            {
                entity.Property(e => e.EventCategory).IsFixedLength(true);

                entity.Property(e => e.EventCost_euro).IsFixedLength(true);

                entity.Property(e => e.EventName).IsFixedLength(true);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}